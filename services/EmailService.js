const nodemailer = require("nodemailer");
const config = require("../config/config");

// Ensure email configuration is properly loaded
if (!config.email.host || !config.email.user || !config.email.pass) {
    console.warn("⚠️ Warning: Email configuration is missing! Check your .env and config.js.");
} else {
    console.log("✅ Email service is configured correctly.");
}

// ✅ Create a transporter using SMTP settings (only if config is correct)
const transporter = config.email.host
    ? nodemailer.createTransport({
          host: config.email.host,
          port: config.email.port,
          secure: config.email.port === 465, // true for port 465, false for port 587
          auth: {
              user: config.email.user,
              pass: config.email.pass,
          },
          tls: {
              rejectUnauthorized: false, // For testing only
          },
          // Optionally, set a longer socket timeout (in milliseconds)
          socketTimeout: 60000,
      })
    : null;

// 📧 Function to send an email
const sendEmail = async (to, subject, html) => {
    if (!transporter) {
        console.error("❌ Email transport is not configured. Cannot send email.");
        return;
    }

    try {
        const mailOptions = {
            from: config.email.from || "no-reply@futurist.com",
            to,
            subject,
            html,
        };
        await transporter.sendMail(mailOptions);
        console.log(`✅ Email sent to: ${to}`);
    } catch (error) {
        console.error(`❌ Email sending failed to ${to}:`, error.message);
    }
};

// 📧 1. Send Verification Email
const sendVerificationEmail = async (user, token) => {
    const verificationUrl = `${config.baseUrl}/verify-email?token=${token}`;
    const html = `
        <h2>Welcome to Futurist, ${user.name}!</h2>
        <p>Click the link below to verify your email:</p>
        <a href="${verificationUrl}">${verificationUrl}</a>
        <p>This link expires in 24 hours.</p>
    `;
    await sendEmail(user.email, "Verify Your Email - Futurist", html);
};

// 📧 2. Send Password Reset Email
const sendResetPasswordEmail = async (user, token) => {
    const resetUrl = `${config.baseUrl}/reset-password?token=${token}`;
    const html = `
        <h2>Password Reset Request</h2>
        <p>Hello ${user.name},</p>
        <p>Click the link below to reset your password:</p>
        <a href="${resetUrl}">${resetUrl}</a>
        <p>If you did not request this, please ignore this email.</p>
    `;
    await sendEmail(user.email, "Reset Your Password - Futurist", html);
};

// 📧 3. Send Forgot Password Email (Newly Added)
// This function uses the passwordResetToken generated by the user model.
const sendForgotPasswordEmail = async (user) => {
    // Construct reset URL using the token stored in the user document
    const resetUrl = `${config.baseUrl}/reset-password?token=${user.passwordResetToken}`;
    const html = `
        <h2>Password Reset Request</h2>
        <p>Hello ${user.name},</p>
        <p>We received a request to reset your password. Please click the link below to reset your password:</p>
        <a href="${resetUrl}">${resetUrl}</a>
        <p>If you did not request this, please ignore this email.</p>
    `;
    await sendEmail(user.email, "Forgot Password - Futurist", html);
};




// 📧 4. Send Order Confirmation Email
const sendOrderConfirmationEmail = async (user, order) => {
    const html = `
        <h2>Order Confirmation</h2>
        <p>Hello ${user.name},</p>
        <p>Thank you for your order. Your order ID is <strong>${order._id}</strong>.</p>
        <p>Total Amount: $${order.totalAmount}</p>
        <p>We will notify you when your order is shipped.</p>
    `;
    await sendEmail(user.email, "Order Confirmation - Futurist", html);
};

// 📧 5. Send Order Status Update Email
const sendOrderStatusUpdateEmail = async (user, order) => {
    const html = `
        <h2>Order Update</h2>
        <p>Hello ${user.name},</p>
        <p>Your order <strong>${order._id}</strong> status has been updated to <strong>${order.status}</strong>.</p>
        <p>Thank you for shopping with us.</p>
    `;
    await sendEmail(user.email, "Order Status Updated - Futurist", html);
};

// 📧 6. Send Support Ticket Confirmation Email
const sendSupportTicketConfirmationEmail = async (user, ticket) => {
    const html = `
        <h2>Support Ticket Received</h2>
        <p>Hello ${user.name},</p>
        <p>Your support request has been received. Ticket ID: <strong>${ticket._id}</strong></p>
        <p>We will get back to you soon.</p>
    `;
    await sendEmail(user.email, "Support Ticket Received - Futurist", html);
};

module.exports = {
    sendVerificationEmail,
    sendResetPasswordEmail,
    sendForgotPasswordEmail, // <-- Newly added function
    sendOrderConfirmationEmail,
    sendOrderStatusUpdateEmail,
    sendSupportTicketConfirmationEmail,
};
